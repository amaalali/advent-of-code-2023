//> using scala 3.3.1
//> using file Helper.scala
import logger.log
import scala.annotation.tailrec
import scala.collection.mutable.HashMap
import scala.collection.mutable.AnyRefMap
import scala.collection.mutable.ArraySeq
import util.chaining.scalaUtilChainingOps

val symbols = """\/|-"""
def parseInputLine(string: String): IndexedSeq[(Int, Char)] =
  string.zipWithIndex.collect {
    case (c, i) if symbols.contains(c) => (i, c)
  }

type Coord = (Int, Int)
extension (coord: Coord)
  def left: Coord = (coord._1 - 1, coord._2)
  def right: Coord = (coord._1 + 1, coord._2)
  def down: Coord = (coord._1, coord._2 + 1)
  def up: Coord = (coord._1, coord._2 - 1)

type MirrorMap = Map[Coord, Char]
def parseInput(string: String): MirrorMap =
  io.Source
    .fromString(string)
    .getLines()
    .zipWithIndex
    .flatMap { (line, yIdx) =>
      parseInputLine(line).map { case (xIdx, c) =>
        (xIdx, yIdx) -> c
      }
    }
    .toMap

val I = 0 // location of optical device
val R = 1
val L = -1
val U = 2
val D = -2
type Dir = R.type | L.type | D.type | U.type | I.type

def calcNextCoord(dir: Dir, curr: Coord): Coord =
  dir match
    case R => curr.right
    case L => curr.left
    case U => curr.up
    case D => curr.down
    case I => curr

extension (light: Set[(Dir, Coord)])
  def onlyValid(xMax: Int, yMax: Int): Set[(Dir, Coord)] =
    light
      .filterNot(x =>
        x._2._1 >= xMax ||
          x._2._1 < 0 ||
          x._2._2 >= yMax ||
          x._2._2 < 0
      )

def RGoU(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.right), (U, curr.right.up))

def LGoU(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.left), (U, curr.left.up))

def RGoD(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.right), (D, curr.right.down))

def LGoD(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.left), (D, curr.left.down))

def RGoR(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.right), (R, curr.right.right))

def LGoL(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.left), (L, curr.left.left))

def UGoR(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.up), (R, curr.up.right))

def DGoR(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.down), (R, curr.down.right))

def UGoL(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.up), (L, curr.up.left))

def UGoU(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.up), (U, curr.up.up))

def DGoL(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.down), (L, curr.down.left))

def DGoD(curr: Coord): Set[(Dir, Coord)] =
  Set((I, curr.down), (D, curr.down.down))

def physics(mirrorMap: MirrorMap, xLen: Int, yLen: Int)(dir: Dir, curr: Coord): Set[(Dir, Coord)] = {
  val nextCoord = calcNextCoord(dir, curr)

  mirrorMap.get(nextCoord) match
    case None => Set((dir, nextCoord)).onlyValid(xLen, yLen)

    case Some(c) => {
      val _nextCoords = (dir, c) match
        case (I, _) => Set.empty
        case (R, '\\') => RGoD(curr)
        case (L, '\\') => LGoU(curr)
        case (U, '\\') => UGoL(curr)
        case (D, '\\') => DGoR(curr)

        case (R, '/') => RGoU(curr)
        case (L, '/') => LGoD(curr)
        case (U, '/') => UGoR(curr)
        case (D, '/') => DGoL(curr)

        case (R, '|') => (RGoU(curr) ++ RGoD(curr))
        case (L, '|') => (LGoU(curr) ++ LGoD(curr))
        case (U, '|') => UGoU(curr)
        case (D, '|') => DGoD(curr)

        case (D, '-') => (DGoR(curr) ++ DGoL(curr))
        case (U, '-') => (UGoR(curr) ++ UGoL(curr))
        case (R, '-') => RGoR(curr)
        case (L, '-') => LGoL(curr)

        case x =>
          // logger.error(s"Encoutered missing match case for ${x}", "phys")
          ???

      // logger.debug(s"dir=[${dir}] curr=[${curr}]", "curr input   ")
      _nextCoords
        // .tap(x => logger.debug(x.toString, "before filter"))
        .onlyValid(xLen, yLen)
        .tap(x => {
          // logger.debug(x.toString, "after  filter")
        })
    }
}

def sizeOfPuzzle(string: String) = {
  val s = io.Source.fromString(string).getLines()
  val xLen = s.next().size
  val yLen = s.length + 1
  (xLen, yLen)
}

given Ordering[Coord] =
  Ordering.fromLessThan((x, y) => (x._2 < y._2) && (x._1 < y._1))

given Ordering[(Dir, Coord)] =
  Ordering.fromLessThan((x, y) => (x._2._2 <= y._2._2) && (x._2._1 <= y._2._1) && (x._1 <= y._1))

def run1(string: String): Int = {
  val mirrorMap = parseInput(string)
  val (xLen, yLen) = sizeOfPuzzle(string)
  val physRunner = physics(mirrorMap, xLen, yLen)
  val MAX_WAIT = xLen * yLen

  logger.debug(s"xLen=[${xLen}] yLen=[${yLen}]")
  logger.debug(mirrorMap.toList.sortBy(_._1._2).toString, "MAP")
  // logger.debug(MAX_WAIT.toString, "run1 MAX_WAIT")
  val initialLightBeams: Set[(Dir, Coord)] = Set((R, (0, 0)))

  @tailrec
  def loop(prev: Set[(Dir, Coord)], identicalCount: Int): Set[(Dir, Coord)] = {
    // logger.debug(s"prevS=[${prev.size}] newS=[${newLights.size}] i_count=[${identicalCount}]")
    val newLights = prev ++ prev.flatMap(physRunner.tupled)
    val grouped = newLights.groupBy(_._2._2).mapValues(_.toList.sortBy(_._2._1)).toMap.toList.sortBy(_._1).map(_._2).flatten

    logger.debug(grouped.toString, "newLights")
    // logger.logEmptyLine()

    if ((newLights.size == prev.size) && (identicalCount >= MAX_WAIT)) prev
    // else if (prev.size > 200) ???
    else if ((newLights.size == prev.size) && (identicalCount < MAX_WAIT)) loop(prev, identicalCount + 1)
    else
      val next = (prev ++ newLights)
      loop(next, 0)
  }

  loop(initialLightBeams, 0)
    .map(_._2)
    // .tap(x => logger.debug(x.toList.sortBy(_._2).toString(), "result"))
    .size
}

def run2(string: String): Int = ???

/*
 **************************
 * TESTING
 **************************
 */

// test.focus.on()
// logger.debug.on()

test(
  physics(parseInput(e1), 3, 2)(R, (0, 0)).map(_._2),
  Set((1, 0), (1, 1))
)

test(
  parseInputLine(""".\."""),
  List(1 -> '\\')
)

test(
  parseInputLine("""./."""),
  List(1 -> '/')
)

test(
  parseInputLine(""".-."""),
  List(1 -> '-')
)

test(
  parseInputLine(""".|."""),
  List(1 -> '|')
)

test(
  parseInput(e10),
  Map(
    (1, 0) -> '\\',
    (2, 0) -> '/',
    (0, 1) -> '|',
    (1, 1) -> '-',
    (2, 1) -> '|'
  )
)

test(run1(e1), 3)

logger.debug.on()
test(run1(example), 46)
// test.ignore(run1(puzzle), ???)
// println("RESULT 1 >>> " + run1(puzzle).toString())

// println("RESULT 2 >>> " + run2(puzzle).toString())

/*
 **************************
 * DATA
 **************************
 */

def e1: String =
  """.\.
    >...""".stripMargin('>')

def e10: String =
  """.\/
    >|-|""".stripMargin('>')

def example: String =
  """.|...\....
    >|.-.\.....
    >.....|-...
    >........|.
    >..........
    >.........\
    >..../.\\..
    >.-.-/..|..
    >.|....-|.\
    >..//.|....""".stripMargin('>')

def puzzle: String =
  """\....|...-...../.....|....................-./............|/.....................-........./.....-.............
    >\..........-.....................-......................................|....................\..../.....-.....
    >....\......-...../../../...\......................\.........................-.............|.............|.....
    >.........../..../...........|/\.............\........\.......|.........|..|../............/.........|.........
    >\./...\........\..........\......./....../...............................|....|........|................/.....
    >-.....|............/...............|...\...|...../......../.....|............|..\..|..../.......-.........\..
    >........-.............||../..........|.........../..................../.|.....|\..-/......./...\...\....-.....
    >....................//........................./..........\.......|...|.........../......\-......-...\........
    >....../..........\......\.....................\................\......\..\..|.................................
    >.................\...............-....../........./....-./..........|..../..-..|../................\..........
    >.............-...............-......|.../.....-.....//.\................../..........-......-...........-.....
    >.........../.\.....................\............-..........|.......\..................\.......................
    >...............\............/.|...\........../....\.............|...........\...............|.../........\....
    >./..............\................-\.../\.......-....................-..............-|.............\.-.........
    >../....../.........|..../......\...\.\.................|......./.......|...............-.........-............
    >-...-............................\.............-.\........-.....|.........././-......|......-..../...|........
    >................-.....................|..|...\.././.............|..........................-.............-....
    >.......|...............................|.......................................-......../.............|-...-..
    >.\|............................\................|.....-.....-................................./...-..\...../..
    >.......\......-....\|......|........................................./...||...............\...................
    >.................../......../.......-......\..............|..\...........-.........-.............../..........
    >........................\......................../.................-........................\.....\...........
    >..........|......|........................|.|\...............\...|.............-...-....-............--.......
    >............|........../....\..........\........../..-..|...........-...\........................./..-........
    >.............||../..../.......................-/.......\.....\............./|..-...............|.....|........
    >................................|..\.........-......./...........-../-............\................\....-../..
    >.............-.............................|.\...............................\\...............................
    >..|.......-................................\.......|.......\.....................|../\..........\..........-..
    >......-..\..........-.................\.-..../\......./......./..-.......................\.....-........\.....
    >............................../.....................\.................\................|..../\.............\..
    >..............................-.......\.........-..........\....../............./.....-........\...-.........|
    >/..................\...||..|...........\...............-............\..........|./.....-.-./.............../..
    >.....|......./...............\.......-................-...........................................\...........
    >.|.................../.....\............./.....\.................-.../.......-..............\..-..............
    >......\........|...|...........//..........|\.\..............................-..../...-............|..........
    >......\....|\......|........../.........../........-.........|.-\//................/..\....|.../........|....
    >.-....-......................./.........\.........-.../............................-..|........|.....|...|....
    >.........-..................-..........-....-....................-....-./.......................|.../......\..
    >..-../......................-\.....|...\........./.-...............-.................../../............|......
    >.-/.......-../.......-...|\...../..........-...\.......\.........-....\-................-......|........-.....
    >.............................\\\............-..............|........../...................-......../....../../
    >.....-....\....\......................-..\...............-..|...............-................-.......\......|.
    >..-...\.............................../.../.............................--.......-..|.|\...../...............\
    >......\.../...-.....|....|......\.../|...................................-................-................./.
    >.......-......-.../..................|../..................\..........................\-..........-\..........
    >.-.......\.........|....|\/./-\.-.....|..................-...................................-|...\...........
    >...........-........../\..................\./..........................\...../...........-...\...../..\....-..
    >..-.|...../|......\..\........|.............-.....|..........\...-...-../......................../.......|....
    >......../................/..\.......\..-...|.....\.......|\..........................-..\../..........\./.....
    >........\.-......|......|..........|........-...................-..\.....-./..............-.\......\..........
    >........|./..................\........|......................\............................./.-\....\........-.
    >........\.|......\................/..\....-/.\.....-.....|............................\..\.|............|...-.
    >...-.....-|..................|...............-./.....................\..\............|.....-..................
    >..........|\./.....\..................|.........|.....................-\./..\........\........................
    >../........\..............|....-...............................................|..........-......../..........
    >..\..............|...../../....................-....\.....................|........\...\\.....................
    >...........................-...\......\......./../..........\-...../.......................-...........\......
    >-.|........................../.....|...............\..........-.............\...-................-.......-....
    >/../.........\........./......-.../..-..................-.......................\............--...............
    >\...............|......-..../......................................-........./|......................\|....../
    >.....\.......................................-...................-.../...........\.......|../.............|...
    >....-....||......\..\.......-.........-......../..../............\..................................-.........
    >...-..|.......\..\..|..........-../-..........\............../...............|..../........./....../.......|./
    >.......................\.......././.............\..................-..........|................../....|.......
    >-.|.....................\\.........../......./.|................/................|./......./....-.............
    >......-...............-....-................|./\..\-/...../......../....-....\....|.-.................../...\.
    >...............\......-...\...\....-....-/....................\./....../..................-|........\./...../.
    >.\......................./..\.........\.........|............|.......-../..\.-..|.-..........................|
    >..|../.....................|/......................./......../.../.........-.../.|./.|.-..............|....-..
    >...-.-/............/............|..........|....../\...\./.....|..................|....\............/.........
    >.....|........./.........\.............../......./../../...................|.......//.......\..\..........\...
    >......./.............\...........\.\..............................................\...................|.......
    >...............-|...../..-............................\.....-.............../\.........-....................\.
    >.........-.....................-...\...................-..../.................||....\.........-.......-..-....
    >.|../..\...\......|..\./.........\..............|..\/......../...............-..-....................-.....\..
    >..................|........\.-.....|.......\............../................................/...-....|...../...
    >...........-......./........-...--........\.../..-...../.|............|......./...............|....../\......\
    >.../.....\...................-..../....................................-......................|.............-.
    >.\.....|....-.....|.....-...................................................|../....\..................\.....-
    >....-........../\......../.......-....\............................./-.............-..........................
    >....\.........-........./......../....|..............\........\../.................\.|...............\........
    >.........-..............|./............-.......................\.......\......-\......\......../..............
    >-.|...|./-..........\..........-...-............|...-......................\..\.............................-.
    >............/......................../.........................................\/..........|.....|.-........|/
    >....../..|./..././.....-......................../....|................../..|........-.....................|./.
    >.......................\....................../......./......\/........\......./....../\|.....\...............
    >\...........\/.|../..................../...............\\...\..../..................\......./.................
    >.../................/...............\./....-./........../........./\..-.................................\.....
    >........-.......-...........\........-.......\............|............|.....-........|..|..../...............
    >.............|...|............/....\............................................-..\......./.../..........\...
    >...................../-..|...........-................../.\...|.....\.....|/.................|................
    >..|................\.....-...........|.\............-.........|....../...................\......-.|.......\...
    >........\......../.....-...\..\...........\........|/.............../......|.......|.\..|........|............
    >..........\.....................-..|/.....\............-............../.......................|./........\....
    >.......\........|...........\......\.......-..-.....|............./......|\..............................|....
    >.........\.......................-............-/.................................\............|...............
    >.........\................/.............................../..........\................-../../......|......-...
    >....\...-./...............\...............|.....\|....|/...............-...........................-..........
    >.|.......\.......-............./.......\............./....................|......|../......-...........\......
    >.....\.....-.....\...\................/......\...\../.\...\....\-....-././...............................|./..
    >.....................-.\.\.........../......./...-......./-.........................\.......|../....\..|..../.
    >..\......./-......-...../..-....../.................../..-.....................-..../...........\...../......
    >......................................./................|....\/....\............/....../......................
    >......................../..........|........-............|.........................|.\................|....../
    >-.............-...|...........-....-..-.|\.......|......\..........-......|-...-......\.......................
    >...........\.\\.../.................\..........\..-......-......|.-............................-.||...|....../
    >....|................--........|.|..........|......\.............................................-............
    >.-..|................/../..-.........................../...../.....\.../....-.....\-..................../.....
    >............./|..........................\...................................-..-..........|....\..|..........
    >....|...../........./.-....-..................../.........../....................-................\./.........""".stripMargin('>')
